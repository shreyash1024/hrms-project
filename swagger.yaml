openapi: 3.1.0

info:
  title: Human Resource Management System API
  version: 1.0.0
  description: This api allows HR to manage employee information.

servers:
  - url: http://localhost:9090/api/v1/hrms

components:
  securitySchemes:
    authorization:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties: 
        _id:
          type: string
          description: Id generated by mongodb
        name:
          type: string
        email:
          type: string
          format: email
        photo:
          type: string
        phone:
          type: string
          description: Only valid indian phone number is allowed
        dob:
          type: string
          format: date-time
          description: Employee date of birth (YYYY-MM-DD)
        role:
          type: string
          enum: [admin, HR, employee]
        department:
          type: string
          description: Only available departments in the system are allowed.
        grade:
          type: string
          description: Only available grades in the system are allowed.
        designation:
          type: string
          description: Only available designations (with provided department and grade) in the system are allowed.
        manager:
          type: string
          format: email 
        salary:
          type: number
        joiningDate:
          type: string
          format: date-time
        address:
          type: string
        active:
          type: boolean
        gradeUpdateRecent:
          type: string
          format: date
          description: Date of promotion/demotion
    Error: 
      type: object
      properties:
        status:
          type: string
          example: fail
        error:
          type: object
        message:
          type: string
          example: error message
        stack:
          type: string
          example: error stacktrace
    LeaveRequest:
      type: object
      properties:
        _id:
          type: string
        employee:
          type: string
        manager:
          type: string
        leaveType:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        half:
          type: string
          enum: [first, second]
        leaveDays:
          type: integer
        reason:
          type: string
        createdAt:
          type: string
        isExpired:
          type: boolean
        action:
          type: string
        actionAt:
          type: string
          format: date-time

security:
  - authorization: []

tags:
  - name: User
    description: Employee management apis
  - name: Leave
    description: Leave management apis

paths:
  /users/me: 
    get:
      summary: To get the logged in user details.
      tags: [User]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                _id: 667d3271f6318cb428bcdd20
                name: Shreyash
                email: shreyash@gmail.com
                phone: 9307123534
                dob: 2001-10-24T00:00:00+05:30
                role: employee
                department: Research and Development
                grade: TS1
                designation: Junior Software Developer
                salary: 437430
                joiningDate: 2024-03-18T18:30:00.000Z
                address: Mumbai
                active: true
                manager: swanand@gmail.com
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: fail
                error:
                  value: {statusCode: 401, status: fail, isOperational: true}
                message: You are not logged in! Please log in to get access
                stack: Error: You are not logged in! Please log in to get access\n    at /home/shreyash/Desktop/HRMS/human-resource-management-system/src/middlewares/authMiddleware.js:39:21\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
        500:
          description: Internal Server Error

  /users/login:
    post:
      summary: To log in the user, authenticate their credentials and issue a JWT token which will expire in 1 day. 
      tags: [User]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object,
              properties: 
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
            example:
              email: shreyash@gmail.com
              password: test1234
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                type: object
                properties:
                  status:
                    type: string
                  token:
                    type: string
              example:
                status: success
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2N2QyZTQ1Nzk3ZmEwYzAzYzc3NzNmOCIsImlhdCI6MTcyMDAwMDQzNCwiZXhwIjoxNzIwMDg2ODM0fQ.s95EGyLrNIsTD5f_P_9h_VfE5IIWFETxILjo4hp6Gyo
        400:
          description: Bad Request
        401:
          description: Unauthorized
        500:
          description: Internal Server Error

  /users/forgotPassword:
    post:
      summary: When user forgot his/her password, then use this api to restore the account
      tags: [User]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
            example:
              email: shreyash@gmail.com
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  passwordResetToken:
                    type: string
                    description: It is a random hexadecimal cryptographic string
              example:
                status: success
                passwordResetToken: bf06c715c0ba056a57970c33b969af32159fd0408cbfa2d7e6e396f3ad311db8
        404:
          description: Not Found
        401:
          description: Unauthorized
        500:
          description: Internal Server Error

  /users/resetPassword/{token}:
    patch:
      summary: Use this api to reset password, give token in parameter which got from forgotPassword api
      tags: [User]
      security: []
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
          description: cryptographic key generated by forgotPassword end point
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
                  minimum: 8
                passwordConfirm:
                  type: string
                  format: password
                  minimum: 8
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                status: success
                message: Password reseted!
        400:
          description: Bad Request
        500:
          description: Internal Server Error

  /users/registration:
    post:
      summary: To onboard employee. Only allow access to HR and admin to this api
      tags: [User]
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                photo:
                  type: string
                phone:
                  type: string
                  description: Only valid indian phone number is allowed
                dob:
                  type: string
                  format: date-time
                  description: Employee date of birth (YYYY-MM-DD)
                role:
                  type: string
                  enum: [admin, HR, employee]
                department:
                  type: string
                  description: Only available departments in the system are allowed.
                grade:
                  type: string
                  description: Only available grades in the system are allowed.
                designation:
                  type: string
                  description: Only available designations (with provided department and grade) in the system are allowed. 
                salary:
                  type: number
                joiningDate:
                  type: string
                  format: date-time
                address:
                  type: string
                password:
                  type: string
                  format: password
                  minimum: 8
                passwordConfirm:
                  type: string
                  format: password
                  minimum: 8
              required:
                - name
                - email
                - phone
                - dob
                - role
                - department
                - grade
                - designation
                - salary
                - joinigDate
                - address
                - password
                - passwordConfirm
            example:
              name: Shreyash
              email: shreyash@gmail.com
              phone: "9307123545"
              dob: 2001-10-24
              role: employee
              department: Research and Development
              grade: TS1
              designation: Junior Software Developer
              salary: 437430
              joiningDate: 2024-03-19
              address: Jalgaon
              password: test1234
              passwordConfirm: test1234
      responses:
        200:
          description: OK
          content:
            application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                    user:
                      type: object
                example:
                  name: Shreyash
                  email: shreyash@gmail.com
                  phone: 9307123545
                  dob: 2001-10-24
                  role: employee
                  department: Research and Development
                  grade: TS1
                  designation: Junior Software Developer
                  salary: 437430
                  joiningDate: 2024-03-19
                  address: Jalgaon
                  createdAt: 2024-06-27T18:30:00.000Z
                  _id: 667d3271f6318cb428bcdd20
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        401:
          description: Unauthorized 
        
  /leaveRequests/{user}:
    get:
      summary: To get leave requests.
      tags: [Leave]
      parameters:
        - in: path
          name: user
          schema:
            type: string
            enum: [requester, manager]
          required: true
          description: who is accessing api to get leave requests? If value is requester then get all leave requests of that requester employee. If value is manager then get all leave requests which are sent to that manager.
        - in: query
          name: employee
          schema:
            type: string
            format: email
          description: use this query parameter to get all leave requests of a particular employee
        - in: query
          name: manager
          schema:
            type: string
            format: email
          description: use this query parameter to get all leave requests for a particular manager
        - in: query
          name: action
          schema:
            type: string
            enum: [approved, rejected]
          description: use this query parameter to get all approved/rejected leave requests of employee/manager. If not provided then get all leave requests which are not approved or rejected or expired.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  results:
                    type: integer
                    desctiption: no. of documents fetched
                  data:
                    type: object
                    properties:
                      leaveRequests:
                        type: array
                        items:
                          $ref: '#/components/schemas/LeaveRequest'
              example: 
                status: "success"
                results: 1
                data: {leaveRequests: [{_id: 6682451cf02a6e345dd516ce,employee: shreyash@gmail.com,manager: swanand@gmail.com,leaveType: SL,startDate: 2024-07-01T00:00:00.000Z,endDate: 2024-07-02T00:00:00.000Z,leaveDays: 2,reason: taking urgent leave,createdAt: 2024-07-01T05:54:20.863Z,isExpired: false,action: approved,actionAt: 2024-07-01T07:29:49.113Z}]}
        404:
          description: Not Found
        401:
          description: Unauthorized
        500:
          description: Internal Server Error

  leaveRequests/{leaveId}:
    delete:
      summary: To delete leaveRequest. Only requester of the leave request can delete that leave request.
      tags: [Leave]
      parameters:
        - in: path
          name: leaveId
          schema:
            type: string
          required: true
          description: id of leave request which is to be deleted.
      responses:
        204:
          description: No Content
        404:
          description: Not Found
        401:
          description: Unauthorized
        500:
          description: Internal Server Error

  leaveRequests/:
    post:
      summary: To create leave request
      tags: [Leave]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object:
              properties:
                leaveType:
                  type: string
                  enum: [SL, PL, CL]
                  required: true
                startDate:
                  type: string
                  format: date
                  required: true
                endDate:
                  type: string
                  format: date
                  required: true
                half:
                  type: string
                  enum: [first, second]
                reason:
                  type: string
                  required: true
            example:
              leaveType: SL
              startDate: 2024-07-01  
              endDate: 2024-07-02
              reason: taking urgent leave
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      leaveRequest:
                        $ref: '#/components/schemas/Leave'
              example:
                status: success
                date: {leaveRequest: {employee: shreyash@gmail.com, manager: swanand@gmail.com, leaveType: SL, startDate: 2024-07-01T00:00:00.000Z, endDate: 2024-07-02T00:00:00.000Z, leaveDays: 2, reason: taking urgent leave, createdAt: 2024-07-01T05:54:20.863Z, isExpired: false, _id: 6682451cf02a6e345dd516ce}}
        404:
          description: Not Found
        401:
          description: Unauthorized
        500:
          description: Internal Server Error
  
  leaveRequests/action/{leaveId}:
    patch:
      summary: To approve or reject the leave request. Only manager of employee can approve/reject the leave request before expiry
      tags: [Leave]
      parameters:
        - in: path
          name: leaveId
          schema:
            type: string
          required: true
          description: id of leave request which is to be approved/rejected.
      requestBody:
        required: true
        content:
          application.json:
            schema:
              type: object:
              properties:
                action:
                  type: string
                  enum: [approve, reject]
                  required: true
            example:
              action: approve
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    $ref: '#/components/schemas/Leave'
              example:
                status: success
                results: 1
                data: {leaveRequests: {_id: 6682451cf02a6e345dd516ce, employee: shreyash@gmail.com, manager: swanand@gmail.com, leaveType: SL, startDate: 2024-07-01T00:00:00.000Z, endDate: 2024-07-02T00:00:00.000Z, leaveDays: 2, reason: taking urgent leave, createdAt: 2024-07-01T05:54:20.863Z, isExpired: false}}
        404:
          description: Not Found
        401:
          description: Unauthorized
        500:
          description: Internal Server Error

  leaveRequests/myLeaves:
    get:
      summary: To get leave data of logged in employee. Use this api to view no. of leaves remaining.
      tags: [Leave]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      myLeaves:
                        type: object
                        properties:
                          _id:
                            type: string
                          email:
                            type: string
                            format: email
                          PL:
                            type: number
                          SL:
                            type: number
                          CL:
                            type: number
                          count:
                            type: integer
                            description: no. of days to finish 1 month to add PL
                          joiningDate:
                            type: string
                            format: date-time
                          probationEnd:
                            type: string
                            format: date-time
              example:
                status: success
                data: {myLeaves: {_id: 667d335ef6318cb428bcdd30, email: swanand@gmail.com, PL: 0, SL: 6, CL: 6, count: 0, joiningDate: 2024-03-18T18:30:00.000Z, probationEnd: 2024-09-18T18:30:00.000Z}}
        404:
          description: Not Found
        401:
          description: Unauthorized
        500:
          description: Internal Server Error      